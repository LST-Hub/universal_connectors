// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                   Int                    @id @default(autoincrement())
  firstName            String
  lastName             String
  country              String?
  city                 String?
  email                String                 @unique
  password             String
  imageUrl             String?
  Integrations         Integrations[]
  MappedRecords        MappedRecords[]
  Fields               Fields[]
  Schedule             Schedule[]
  Logs                 Logs[]
  NotificationSettings NotificationSettings[]
  Configurations       Configurations[]
  Credentials          Credentials[]

  @@unique(fields: [email, password], name: "loginUser")
}

model Integrations {
  id               Int              @id @default(autoincrement())
  userId           Int
  user             Users            @relation(fields: [userId], references: [id])
  integrationName  String
  sourceName       String
  destinationName  String
  schedule         Boolean
  fieldMapping     Boolean
  status           String
  syncWay          String
  creationDate     DateTime         @default(now())
  modificationDate DateTime         @updatedAt
  Configurations   Configurations[]
  MappedRecords    MappedRecords[]
  Schedule         Schedule[]
  Logs             Logs[]
}

model Configurations {
  id                 Int          @id @default(autoincrement())
  userId             Int
  user               Users        @relation(fields: [userId], references: [id])
  integrationId      Int
  integration        Integrations @relation(fields: [integrationId], references: [id])
  systemName         String
  url                String?
  accountId          String?
  consumerKey        String?
  consumerSecretKey  String?
  accessToken        String?
  accessSecretToken  String?
  authenticationType String?
  creationDate       DateTime     @default(now())
  modificationDate   DateTime     @updatedAt

  // @@unique(fields: [integrationId, systemName], name: "configDetails")
}

model MappedRecords {
  id               Int          @id @default(autoincrement())
  userId           Int
  user             Users        @relation(fields: [userId], references: [id])
  integrationId    Int
  integration      Integrations @relation(fields: [integrationId], references: [id])
  source           String
  destination      String
  recordTypeTitle  String
  url              String
  creationDate     DateTime     @default(now())
  modificationDate DateTime     @updatedAt
  Fields           Fields[]
  Logs             Logs[]
}

model Fields {
  id                    Int           @id @default(autoincrement())
  userId                Int
  user                  Users         @relation(fields: [userId], references: [id])
  mappedRecordId        Int
  mappedRecord          MappedRecords @relation(fields: [mappedRecordId], references: [id], onDelete: Cascade)
  // FieldType             String
  sourceField           String
  destinationField      String
  sourceFieldValue      String
  destinationFieldValue String
}

model Schedule {
  id               Int          @id @default(autoincrement())
  userId           Int
  user             Users        @relation(fields: [userId], references: [id])
  integrationId    Int
  integration      Integrations @relation(fields: [integrationId], references: [id])
  eventType        String
  startDate        DateTime     @default(now())
  endDate          DateTime
  startTime        String
  day              String
  noEndDate        Boolean
  repeatEveryDay   Boolean
  creationDate     DateTime     @default(now())
  modificationDate DateTime     @updatedAt
}

model Logs {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           Users         @relation(fields: [userId], references: [id])
  integrationId  Int
  integration    Integrations  @relation(fields: [integrationId], references: [id])
  mappedRecordId Int
  mappedRecord   MappedRecords @relation(fields: [mappedRecordId], references: [id])
  status         String
  logMessage     String
}

model NotificationSettings {
  id                Int    @id @default(autoincrement())
  userId            Int
  user              Users  @relation(fields: [userId], references: [id])
  notificationLabel String
  email             String
}

model Credentials {
  id           Int    @id @default(autoincrement())
  userId       Int
  user         Users  @relation(fields: [userId], references: [id])
  refreshToken String
}
